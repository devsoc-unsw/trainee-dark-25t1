// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(uuid())
  name                   String
  email                  String    @unique
  password               String
  profilePic             String
  bio                    String
  remainingLoginAttempts Int       @default(5)
  linkedIn               String
  github                 String
  degree                 String
  university             String
  skills                 String[]
  gender                 Gender
  projects               Project[] @relation("ProjectMembers")
  reviews                Review[]  @relation("Reviewer")
  reviewsReceived        Review[]  @relation("Reviewee")
  dms                    Dm[]
  messages               Message[]
  preference             Gender
  friends                User[]    @relation("friends")
  friendOf               User[]    @relation("friends")
  tokens                 Token[]
}

model Project {
  id             String   @id @default(uuid())
  name           String
  description    String
  capacity       Int
  availableSlots Int
  picture        String
  technologies   String[]
  members        User[]   @relation("ProjectMembers")
}

model Review {
  id         String @id @default(uuid())
  comment    String
  reviewer   User   @relation(fields: [reviewerId], references: [id], onDelete: Cascade, "Reviewer")
  reviewerId String
  reviewee   User   @relation(fields: [revieweeId], references: [id], onDelete: Cascade, "Reviewee")
  revieweeId String
}

model Dm {
  id       String    @id @default(uuid())
  name     String
  users    User[]
  messages Message[]
}

model Message {
  id        String   @id @default(uuid())
  message   String
  timestamp DateTime @default(now())
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String
  dm        Dm       @relation(fields: [dmId], references: [id], onDelete: Cascade)
  dmId      String
}

model Token {
  id           String @id @default(uuid())
  accessToken  String @unique
  refreshToken String @unique
  userId       String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NONE
}
